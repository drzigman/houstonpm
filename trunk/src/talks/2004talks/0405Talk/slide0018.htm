<HTML>
<!-- *** Created by pp2html, build 1.21 from PerlPoint-Converters 1.01  -->
<HEAD>
<TITLE>File::Path</TITLE>
</HEAD>
<!-- ************************************************************** -->
<BODY bgcolor="#FFFFFF" text="#000000" link="#1874cd" vlink="#AAAAAA" alink="#FF0000">
<!--
  *** NAVIGATION BAR =================================================
  $Revision: 1.2 $
  $Date: 2001/12/06 21:38:12 $
-->

<center>
<TABLE> 
<TR>
  <TD colspan=3 >
    <font size=-1>
    Next: <a href="slide0019.htm">File::Spec</a>
    &nbsp;&nbsp;Previous: <a href="slide0017.htm">File::Find</a>
     &nbsp;&nbsp;Contents: <a href="slide0000.htm" target="Data">Index</a>
    </font> 
  </td>
</TR>
</TABLE>
<img src="orange_line.png">
</center>

<a name="File::Path">
<center>
<H1>File::Path
</H1></center>


<P>
This is how easy it's to use:
</P>

<UL>
<TABLE BORDER=2 CELLPADDING=5 WIDTH=80%><TR><TD bgcolor="#e5e5e5"><PRE>
<B><FONT COLOR="#000000">
    use File::Path;

    mkpath(['/foo/bar/baz', 'blurfl/quux'], 1, 0711);
    rmtree(['foo/bar/baz', 'blurfl/quux'], 1, 1);</FONT></B></PRE></TD></TR></TABLE></UL>


<P>
The &quot;mkpath&quot; function provides a convenient way to create directories, even if your &quot;mkdir&quot; kernel call won't create more than one level of directory at a time.  &quot;mkpath&quot; takes three arguments:
</P>

<OL>
<LI VALUE=1>the name of the path to create, or a reference to a list of paths to create,</LI>
<LI>a boolean value, which if TRUE will cause &quot;mkpath&quot; to print the name of each directory as it's created (defaults to FALSE), and</LI>
<LI>the numeric mode to use when creating the directories (defaults to 0777)</LI>
</OL>


<P>
It returns a list of all directories (including intermediates, determined using the Unix '/' separator) created.
</P>


<P>
If a system error prevents a directory from being created, then the &quot;mkpath&quot; function throws a fatal error with &quot;Carp::croak&quot;. This error can be trapped with an &quot;eval&quot; block:
</P>

<UL>
<TABLE BORDER=2 CELLPADDING=5 WIDTH=80%><TR><TD bgcolor="#e5e5e5"><PRE>
<B><FONT COLOR="#000000">
  eval { mkpath($dir) };
  if ($@) {
    print &quot;Couldn't create $dir: $@&quot;;
  }</FONT></B></PRE></TD></TR></TABLE></UL>


<P>
Similarly, the &quot;rmtree&quot; function provides a convenient way to delete a subtree from the directory structure, much like the Unix command &quot;rm -r&quot;.  &quot;rmtree&quot; takes three arguments:
</P>

<OL>
<LI VALUE=1>the root of the subtree to delete, or a reference to a list of roots.  All of the files and directories below each root, as well as the roots themselves, will be deleted.</LI>
<LI>a boolean value, which if TRUE will cause &quot;rmtree&quot; to print a message each time it examines a file, giving the name of the file, and indicating whether it's using &quot;rmdir&quot; or &quot;unlink&quot; to remove it, or that it's skipping it.  (defaults to FALSE)</LI>
<LI>a boolean value, which if TRUE will cause &quot;rmtree&quot; to skip any files to which you do not have delete access (if running under VMS) or write access (if running under another OS).  This will change in the future when a criterion for 'delete permission' under OSs other than VMS is settled.  (defaults to FALSE)</LI>
</OL>


<P>
It returns the number of files successfully deleted.  Symlinks are simply deleted and not followed.
</P>
</BODY>
</HTML>
