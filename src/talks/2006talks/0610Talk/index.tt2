[% WRAPPER writeup_wrap.tt2
    title='Summary of October 2006 Presentation'
    year=2006
%]
    <h1 class="subhead">Using Perl::Critic to Improve Code</h1>
    <p>Wade introduced the modules <a href="http://search.cpan.org/~thaljef/Perl-Critic-0.2/">Perl::Critic</a>
      and <a href="http://search.cpan.org/~petdance/Perl-Critic-Bangs-0.22/">Perl::Critic::Bangs</a>.
      The <code>Perl::Critic</code> module analyzes Perl code with respect to
      a set of policies looking for violations of defined policies. The default
      policies are based on the book <cite>Perl Best Practices</cite> by
      Damian Conway. The policies in the <code>Perl::Critic::Bangs</code>
      module were collected by Andy Lester.</p>

    <p>One of the best things about the code analysis used by
      <code>Perl::Critic</code> is the ability to customize the individual
      policies. The module supports a <code>.perlcriticrc</code> file which
      allows you to customize both the severity of a policy violation (5 is
      most severe and 1 is least) and, in some cases, modify the policy itself.
      In addition, special comment markers can be used to disable a policy for
      a particular section of code if necessary. This allows you define policies
      for your environment, while still supporting special purpose overrides
      for when ugly, power code is needed.</p>

    <p>The <code>perlcritic</code> program is used from the command line to
      test individual files or directories of files. Additionally, the module
      <a href="http://search.cpan.org/~thaljef/Test-Perl-Critic-0.07/">Test::Perl::Critic</a>
      supports adding this code critique to your module unit tests.</p>

    <p>The obvious questions are</p>
    <ul>
      <li>How well does the module work?</li>
      <li>Will the use of this module improve my code?</li>
    </ul>

    <p>First of all, before using the module, you will want to customize the
      policies to match your coding standards. For example, Wade showed
      his <a href="./gwj_perlcriticrc">.perlcriticrc</a>. This includes changes
      in severity levels for some policies and disabling a few others. This
      helps avoid <em>false positives</em> from policies that you don't agree
      with.</p>

    <p>Next, run the <code>perlcritic</code> command on some of your code. You
      may find that you have not followed the policies you thought you had.
      Wade showed the results when <code>perlcritic</code> was run over two
      of his projects at various levels of severity. The results were pretty
      good for his most recent module <code>Device::USB</code>. This module
      benefits from a recent reading of <cite>Perl Best Practices</cite> and
      multiple runs of <code>perlcritic</code>. On the other hand, the module
      <code>Games::Maze::SVG</code> got extremely bad reports, despite the
      fact that the <em>same</em> policies had been followed during
      development.</p>

    <p>This shows how important automatic verification can be.</p>

    <p>The meeting then moved into a discussion of various policies and best
      practices. Wade floated the idea of a Houston.pm version of the
      <code>.perlcriticrc</code> file. Although people expressed some interest,
      we did not spend much time on it.</p>
[% END -%]
