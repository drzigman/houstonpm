<HTML>
<!-- *** Created by pp2html, build 1.21 from PerlPoint-Converters 1.01  -->
<HEAD>
<TITLE> Calculator Example, Take Two</TITLE>
</HEAD>
<!-- ************************************************************** -->
<BODY bgcolor="#FFFFFF" text="#000000" link="#1874cd" vlink="#AAAAAA" alink="#FF0000">
<!--
  *** NAVIGATION BAR =================================================
  $Revision: 1.2 $
  $Date: 2001/12/06 21:38:12 $
-->

<center>
<TABLE> 
<TR>
  <TD colspan=3 >
    <font size=-1>
    Next: <a href="slide0012.htm"> The New Commands Hash</a>
    &nbsp;&nbsp;Previous: <a href="slide0010.htm"> Calculator Example Has Flaws</a>
     &nbsp;&nbsp;Contents: <a href="slide0000.htm" target="Data">Index</a>
    </font> 
  </td>
</TR>
</TABLE>
<img src="orange_line.png">
</center>

<a name=" Calculator Example, Take Two">
<center>
<H1>5  Calculator Example, Take Two
</H1></center>

<UL>
<TABLE><TR><TD valign="TOP"><IMG SRC="./sqr_orange1.png"></TD><TD>
By extending the data structure, the calculator becomes easier to maintain.
</TD></TR></TABLE>
</UL>


<P>

<UL>
<TABLE BORDER=2 CELLPADDING=5 WIDTH=80%><TR><TD bgcolor="#e5e5e5"><PRE>
<B><FONT COLOR="#000000">
#!/usr/bin/perl

use warnings;
use strict;

$| = 1;  # Unbuffer stdout

# Data stack
my @Stack = ();

# Command definitions
my %Commands =
(
    &quot;+&quot; =&gt;
        {
           code =&gt; sub { push @Stack, pop( @Stack ) + pop( @Stack ) },
	   help =&gt; &quot;adds the top two numbers on the stack&quot;,
	   count =&gt; 2,
	},
    &quot;-&quot; =&gt;
        {
           code =&gt; sub { push @Stack, -pop( @Stack ) + pop( @Stack ) },
	   help =&gt; &quot;subtracts the top two numbers on the stack&quot;,
	   count =&gt; 2,
	},
    &quot;*&quot; =&gt;
        {
           code =&gt; sub { push @Stack, pop( @Stack ) * pop( @Stack ) },
	   help =&gt; &quot;multiplies the top two numbers on the stack&quot;,
	   count =&gt; 2,
	},
    &quot;/&quot; =&gt;
        {
           code =&gt; sub { my $d = pop @Stack; push @Stack, pop( @Stack ) / $d; },
	   help =&gt; &quot;divides the top two numbers on the stack&quot;,
	   count =&gt; 2,
	},
    &quot;dup&quot; =&gt;
        {
           code =&gt; sub { push @Stack, $Stack[-1] if @Stack; },
	   help =&gt; &quot;duplicate the top number on the stack&quot;,
	   count =&gt; 1,
	},
    &quot;drop&quot; =&gt;
        {
           code =&gt; sub { pop @Stack; },
	   help =&gt; &quot;discard the top number on the stack&quot;,
	   count =&gt; 1,
	},
    &quot;swap&quot; =&gt;
        {
           code =&gt; sub { @Stack[-1,-2] = @Stack[-2,-1] },
	   help =&gt; &quot;swap the top two items on the stack&quot;,
	   count =&gt; 2,
	},
    &quot;.&quot; =&gt;
        {
           code =&gt; sub { my $top = pop @Stack; print &quot;$top\n&quot;; },
	   help =&gt; &quot;remove the top number from the stack and print it&quot;,
	   count =&gt; 1,
	},
    &quot;.s&quot; =&gt;
        {
           code =&gt; sub { print &quot;@Stack\n&quot;; },
	   help =&gt; &quot;print the entire stack without changing it&quot;,
	   count =&gt; 0,
	},
    &quot;quit&quot; =&gt;
        {
           code =&gt; sub { exit; },
	   help =&gt; &quot;exit the program&quot;,
	   count =&gt; 0,
	},
    &quot;help&quot; =&gt;
        {
           code =&gt; \&amp;help,
	   help =&gt; &quot;this screen&quot;,
	   count =&gt; 0,
	},
);

# Interpreter loop
print &quot;=&gt; &quot;;
LINE:
while(&lt;&gt;)
{
    chomp;
    foreach my $word (split)
    {
        if(exists $Commands{$word})
	{
	    if(@Stack &lt; $Commands{$word}-&gt;{count})
	    {
	        print &quot;Stack underflow!\n&quot;;
		@Stack = ();
		next LINE;
	    }
	    $Commands{$word}-&gt;{code}-&gt;();
	}
	elsif($word =~ /^\d*(\.\d*)?$/)
	{
	    push @Stack, $word;
	}
	else
	{
	    print &quot;Unrecognized token: '$word'.\n&quot;;
	}
    }
}
continue
{
    print &quot;=&gt; &quot;;
}


# Print a help message on the screen
sub help
{
    print &quot;The calculator supports the following commands:\n\n&quot;;
    
    foreach my $cmd (sort keys %Commands)
    {
        printf &quot;  %-5s %s\n&quot;, $cmd, $Commands{$cmd}-&gt;{help};
    }

    print &lt;&lt;&quot;EOH&quot;;

Any number is pushed on the stack.
Anything else is treated as an error.
EOH
}
</FONT></B></PRE></TD></TR></TABLE></UL>

</P>
</BODY>
</HTML>
