<HTML>
<!-- *** Created by pp2html, build 1.21 from PerlPoint-Converters 1.01  -->
<HEAD>
<TITLE>Filtering a List</TITLE>
</HEAD>
<!-- ************************************************************** -->
<BODY bgcolor="#FFFFFF" text="#000000" link="#1874cd" vlink="#AAAAAA" alink="#FF0000">
<!--
  *** NAVIGATION BAR =================================================
  $Revision: 1.2 $
  $Date: 2001/12/06 21:38:12 $
-->

<center>
<TABLE> 
<TR>
  <TD colspan=3 >
    <font size=-1>
    Next: <a name="xx"></a>
    &nbsp;&nbsp;Previous: <a href="slide0009.htm">Processing a List</a>
     &nbsp;&nbsp;Contents: <a href="slide0000.htm" target="Data">Index</a>
    </font> 
  </td>
</TR>
</TABLE>
<img src="orange_line.png">
</center>

<a name="Filtering a List">
<center>
<H1>Filtering a List
</H1></center>


<P>
Another useful way of using the grep operator is as the conditional in an if statement. We went through a lot of off-the-cuff examples before settling on this as a pretty good example.
</P>

<UL>
<TABLE BORDER=2 CELLPADDING=5 WIDTH=80%><TR><TD bgcolor="#e5e5e5"><PRE>
<B><FONT COLOR="#000000">
 die &quot;Bad params\n&quot; if grep /D/, @numlist;</FONT></B></PRE></TD></TR></TABLE></UL>


<P>
This code checks to see if any item in @numlist has a non-digit character in it. If it finds any non-digit characters, it dies. One very important point is that the if is only executed once, on the return value of the grep. This could also be recoded as the following.
</P>

<UL>
<TABLE BORDER=2 CELLPADDING=5 WIDTH=80%><TR><TD bgcolor="#e5e5e5"><PRE>
<B><FONT COLOR="#000000">
 foreach $f (@numlist)
  {
   die &quot;Bad params\n&quot; if $f =~ /D/;
  }</FONT></B></PRE></TD></TR></TABLE></UL>


<P>
Although the second is easier to read if you don't know grep, once you are comfortable with it the first is as simple as the equivalent test for a scalar:
</P>

<UL>
<TABLE BORDER=2 CELLPADDING=5 WIDTH=80%><TR><TD bgcolor="#e5e5e5"><PRE>
<B><FONT COLOR="#000000">
 die &quot;Bad param\n&quot; if $num =~ /D/;</FONT></B></PRE></TD></TR></TABLE></UL>


<P>
The unique example generated quite a lot of discussion. First of all, this one is very cryptic if you haven't seen it before. In trying to make it easier to understand, we took two approaches. First, we walked through the example to see exactly what was happening. Second, we rewrote the expression without using grep to see what it would look like. For reference, let's repeat the code here.
</P>

<UL>
<TABLE BORDER=2 CELLPADDING=5 WIDTH=80%><TR><TD bgcolor="#e5e5e5"><PRE>
<B><FONT COLOR="#000000">
    my @list = qw/one two two three four three two/;
    my %seen;
    my @uniq = grep {! $seen{$_}++} @list;
    print &quot;@uniq\n&quot;; # one two three four</FONT></B></PRE></TD></TR></TABLE></UL>


<P>
The following table shows each step in the grep process. Since we are using a post-increment in the expression, we'll have a column for the value of the expression (old value) and the value after the increment (new value). The other columns should be relatively self-explanatory.
</P>
<TABLE border=2><TR>
<TD><B>$_</B></TD><TD><B>old $seen{$_}</B></TD><TD><B>new $seen{$_}</B></TD><TD><B>@uniq</B></TD></TR>
<TR>
<TD>'one'</TD><TD>undef</TD><TD>1</TD><TD>('one')</TD></TR>
<TR>
<TD>'two'</TD><TD>undef</TD><TD>1</TD><TD>('one','two')</TD></TR>
<TR>
<TD>'two'</TD><TD>1</TD><TD>2</TD><TD>('one','two')</TD></TR>
<TR>
<TD>'three'</TD><TD>undef</TD><TD>1</TD><TD>('one','two','three')</TD></TR>
<TR>
<TD>'four'</TD><TD>undef</TD><TD>1</TD><TD>('one','two','three','four')</TD></TR>
<TR>
<TD>'three'</TD><TD>1</TD><TD>2</TD><TD>('one','two','three','four')</TD></TR>
<TR>
<TD>'two'</TD><TD>2</TD><TD>3</TD><TD>('one','two','three','four')</TD></TR>
</TABLE>
<P>


<P>
Rewriting the grep expression to make it somewhat more obvious what is happening leaves something looking like this.
</P>

<UL>
<TABLE BORDER=2 CELLPADDING=5 WIDTH=80%><TR><TD bgcolor="#e5e5e5"><PRE>
<B><FONT COLOR="#000000">
 my @list = qw/one two two three four three two/;

 my %seen;
 my @uniq;
 foreach(@list)
  {
   push @uniq, $_ if ! $seen{$_}++
  }</FONT></B></PRE></TD></TR></TABLE></UL>


<P>
This would be slightly slower than the grep-based version. However, the worst part of it from my point of view is the fact that the returned value is hidden inside the expression and is, therefore, not obvious to whoever comes to maintain it later.
</P>


<P>
As a final point, I wrote an <A HREF="">essay</A> about a year ago on some of the uses of Perl lists. That article is somewhat more advanced than this talk was meant to be. But it may still be interesting.
</P>
</BODY>
</HTML>
