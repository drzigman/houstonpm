[% WRAPPER writeup_wrap.tt2
    title='Summary of March 2018 Presentation'
    year=2018
%]
      <h2>Making a Cute Robot with Perl</h2>

      <p>Mark Gardner started the evening describing a project for a <abbr title="Girls in Engineering, Math, and Science">GEMS</abbr> conference.
The girls on the team came up with an idea for making a robot-controlled doll.
Mark agreed to help with the software and some of the hardware work.</p>
      <p>The end result was a robot Pooh Bear, driven by an XBox controller.
The left and right joysticks controlled the arms, and the keypad controlled the head.
The mechanics involved pieces of plywood and servos.
A Pi-top computer (about $200)  was the brains of the robot.</p>
      <p>A Servo Hat on the Raspberry Pi controlled the servos, using the I2C protocol.
They used the <code>RPi::WiringPi</code> module to talk to the Raspberry Pi,
and the <code>RPi::WiringPi::SparkFunServoHat</code> module allowed control of the servos.</p>
      <p>The result was a <code>joy_bear.pl</code> script, which was wrapped in a shell script that restarted the program if it failed.
The project involved quite a bit of trial and error.
The final program used callbacks to control the bear and read input from the controller.
It was driven by a small event loop.
Determining thresholds to keep the sensitivity reasonable was a challenge.</p>
      <p>The resulting bear won first prize at the conference.</p>
      <p>The girls originally wanted to control a Barbie, but given the size of the hardware, they moved to a baby doll, and eventually the bear.
The girls did the presenting and some of the hardware work.
Mark did the programming.
In the end, the girls were interested in the code and got printouts, so that they could learn from it.</p>
      <p>Mark's demonstration of the functioning bear-robot was fun.
The group had a few questions, but the results were mostly a hit.</p>

      <h2>AWStats Flaws</h2>
      <p>For the next in his series of security presentations, J.D. delved into some of the problems with AWStats.
He began with a quick explanation of the AWStats program.</p>
      <p>The first thing he decided to try was looking for the pipe symbol in the language file.
This might point to potential 2 argument open injections.</p>
      <p>Then, J.D. spent some time describing some of the characteristics of the program that made it a good choice to look for exploits.
Some things that imply potential problems included:</p>

    <ul>
        <li>The program is one big file</li>
        <li>Lots of global variables</li>
        <li>HTML formatting directly in the code</li>
        <li>Manual processing of the query string</li>
        <li>Subroutines with sigils</li>
        <li>Bad regular expressions sprinkled in the code</li>
        <li>Direct use of <code>eval</code> in the code</li>
    </ul>

      <p>While none of these are guaranteed to be a problem, they do point to potential issues.</p>
      <p>After some examination, he determined that one of the potential parameters is a configuration file.
Since the program reads the configuration file from the server, the exploit would require getting a file onto the server.
Next, he explored the possibility of using <code>/dev/stdin</code> as the file.</p>
      <p>The program does do a file test, which limits some kinds of exploits.
Apparently, the config files support including other config files, and that logic does not include the file test.
A little more exploration showed that he could use <code>/proc/self/environ</code> as a file to read.
This is particularly interesting since <abbr title="Common Gateway Interface">CGI</abbr> files end up loading information from the caller into the environment.
He pointed out that <code>/dev/stdin</code> was not actually necessary to any exploit, it was just the vector he began with.</p>
      <p>After reporting an exploit generated from the above, he did not report an obvious second version of a path traversal bug in the migrate code.</p>
      <p>As usual, J.D.'s explanation was clear and in-depth.</p>
      <p>We had 9 people attending this month. As always, we'd like to thank
        cPanel, Inc. for providing the meeting space and food for the group.</p>
[% END -%]
