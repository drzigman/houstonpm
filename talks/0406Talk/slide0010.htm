<HTML>
<!-- *** Created by pp2html, build 1.21 from PerlPoint-Converters 1.01  -->
<HEAD>
<TITLE>Clean up the code</TITLE>
</HEAD>
<!-- ************************************************************** -->
<BODY bgcolor="#FFFFFF" text="#000000" link="#1874cd" vlink="#AAAAAA" alink="#FF0000">
<!--
  *** NAVIGATION BAR =================================================
  $Revision: 1.2 $
  $Date: 2001/12/06 21:38:12 $
-->

<center>
<TABLE> 
<TR>
  <TD colspan=3 >
    <font size=-1>
    Next: <a href="slide0011.htm">Using the map() Function</a>
    &nbsp;&nbsp;Previous: <a href="slide0009.htm">Fully format the number</a>
     &nbsp;&nbsp;Contents: <a href="slide0000.htm" target="Data">Index</a>
    </font> 
  </td>
</TR>
</TABLE>
<img src="orange_line.png">
</center>

<a name="Clean up the code">
<center>
<H1>Clean up the code
</H1></center>


<P>
Such manipulation inside the replacement portion can become quite complex and it would be much more readable to replace all that with a call to a subroutine that did the necessary manipulation:
</P>

<UL>
<TABLE BORDER=2 CELLPADDING=5 WIDTH=80%><TR><TD bgcolor="#e5e5e5"><PRE>
<B><FONT COLOR="#000000">
    my $string = 'foo = 12.4321 and bar = 14003.1890';
    $string =~ s{
                  (\d+          # one-or-more digits into $1
                   (?:\.\d+)    # with optional decimal portion
                  )
                }{
                    round_and_commify($1)
                }xeg;
    print &quot;$string\n&quot;;</FONT></B></PRE></TD></TR></TABLE></UL>


<P>
The above assumes you have defined a round_and_commify() routine to do the real work.
</P>
</BODY>
</HTML>
