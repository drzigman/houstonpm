<HTML>
<!-- *** Created by pp2html, build 1.21 from PerlPoint-Converters 1.01  -->
<HEAD>
<TITLE>Creating A Popup Menu</TITLE>
</HEAD>
<!-- ************************************************************** -->
<BODY bgcolor="#FFFFFF" text="#000000" link="#1874cd" vlink="#AAAAAA" alink="#FF0000">
<!--
  *** NAVIGATION BAR =================================================
  $Revision: 1.2 $
  $Date: 2001/12/06 21:38:12 $
-->

<center>
<TABLE> 
<TR>
  <TD colspan=3 >
    <font size=-1>
    Next: <a href="slide0024.htm">Creating A Scrolling List</a>
    &nbsp;&nbsp;Previous: <a href="slide0022.htm">Creating A Password Field</a>
     &nbsp;&nbsp;Contents: <a href="slide0000.htm" target="Data">Index</a>
    </font> 
  </td>
</TR>
</TABLE>
<img src="orange_line.png">
</center>

<a name="Creating A Popup Menu">
<center>
<H1>Creating A Popup Menu
</H1></center>

<UL>
<TABLE BORDER=2 CELLPADDING=5 WIDTH=80%><TR><TD bgcolor="#e5e5e5"><PRE>
<B><FONT COLOR="#000000">
  print $query-&gt;popup_menu(-name=&gt;'menu_name',
                            -values=&gt;[qw/eenie meenie minie/],
			    -labels=&gt;{'eenie'=&gt;'one',
                                         'meenie'=&gt;'two',
                                         'minie'=&gt;'three'},
	                    -default=&gt;'meenie');

  print $query-&gt;popup_menu(-name=&gt;'menu_name',
			    -values=&gt;['eenie','meenie','minie'],
	                    -default=&gt;'meenie');</FONT></B></PRE></TD></TR></TABLE></UL>


<P>
popup_menu() creates a menu.
</P>

<UL>
<TABLE><TR><TD valign="TOP"><IMG SRC="./sqr_orange1.png"></TD><TD>
The required first argument (-name) is the menu's name.
</TD></TR></TABLE>
<TABLE><TR><TD valign="TOP"><IMG SRC="./sqr_orange1.png"></TD><TD>
The required second argument (-values) is an array reference containing the list of menu items in the menu. You can pass the method an anonymous array, as shown in the example, or a reference to a named array, such as @foo. If you pass a HASH reference, the keys will be used for the menu values, and the values will be used for the menu labels (see -labels below). However, the menu values will be in arbitrary order.
</TD></TR></TABLE>
<TABLE><TR><TD valign="TOP"><IMG SRC="./sqr_orange1.png"></TD><TD>
The optional third parameter (-default) is the name of the default menu choice. If not specified, the first item will be the default. The value of the previous choice will be maintained across queries.
</TD></TR></TABLE>
<TABLE><TR><TD valign="TOP"><IMG SRC="./sqr_orange1.png"></TD><TD>
The optional fourth parameter (-labels) allows you to pass a reference to an associative array containing user-visible labels for one or more of the menu items. You can use this when you want the user to see one menu string, but have the browser return your program a different one. If you don't specify this, the value string will be used instead (&quot;eenie&quot;, &quot;meenie&quot; and &quot;minie&quot; in this example). This is equivalent to using a hash reference for the -values parameter.
</TD></TR></TABLE>
</UL>


<P>
When the form is processed, the selected value of the popup menu can be retrieved using:
</P>

<UL>
<TABLE BORDER=2 CELLPADDING=5 WIDTH=80%><TR><TD bgcolor="#e5e5e5"><PRE>
<B><FONT COLOR="#000000">
  $popup_menu_value = $query-&gt;param('menu_name');</FONT></B></PRE></TD></TR></TABLE></UL>


<P>
JavaScripting: You can provide -onChange, -onFocus, -onMouseOver, -onMouseOut, and -onBlur parameters to register JavaScript event handlers.
</P>
</BODY>
</HTML>
