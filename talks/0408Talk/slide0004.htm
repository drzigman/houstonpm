<HTML>
<!-- *** Created by pp2html, build 1.21 from PerlPoint-Converters 1.01  -->
<HEAD>
<TITLE>Object Oriented use</TITLE>
</HEAD>
<!-- ************************************************************** -->
<BODY bgcolor="#FFFFFF" text="#000000" link="#1874cd" vlink="#AAAAAA" alink="#FF0000">
<!--
  *** NAVIGATION BAR =================================================
  $Revision: 1.2 $
  $Date: 2001/12/06 21:38:12 $
-->

<center>
<TABLE> 
<TR>
  <TD colspan=3 >
    <font size=-1>
    Next: <a href="slide0005.htm">Creating a new CGI object</a>
    &nbsp;&nbsp;Previous: <a href="slide0003.htm">Function-Oriented use</a>
     &nbsp;&nbsp;Contents: <a href="slide0000.htm" target="Data">Index</a>
    </font> 
  </td>
</TR>
</TABLE>
<img src="orange_line.png">
</center>

<a name="Object Oriented use">
<center>
<H1>Object Oriented use
</H1></center>


<P>
In the object-oriented mode, you use CGI; without specifying any functions or function sets to import. In this case, you communicate with CGI.pm via a CGI object. The object is created by a call to CGI::new() and encapsulates all the state information about the current CGI transaction, such as values of the CGI parameters passed to your script. Although more verbose, this coding style has the advantage of allowing you to create multiple CGI objects, save their state to disk or to a database, and otherwise manipulate them to achieve neat effects.
</P>


<P>
The same script written using the object-oriented style looks like this:
</P>

<UL>
<TABLE BORDER=2 CELLPADDING=5 WIDTH=80%><TR><TD bgcolor="#e5e5e5"><PRE>
<B><FONT COLOR="#000000">
  #!/usr/local/bin/perl
  use CGI;
  $q = new CGI;
  print $q-&gt;header(),
      $q-&gt;start_html(-title=&gt;'Wow!'),
      $q-&gt;h1('Wow!'),
      'Look Ma, no hands!',
      $q-&gt;end_html();</FONT></B></PRE></TD></TR></TABLE></UL>


<P>
The object-oriented mode also has the advantage of consuming somewhat less memory than the function-oriented coding style. This may be of value to users of persistent Perl interpreters such as mod_perl.
</P>


<P>
Many of the code examples we'll present show the object-oriented coding style. Mentally translate them into the function-oriented style if you prefer.
</P>
</BODY>
</HTML>
