<HTML>
<!-- *** Created by pp2html, build 1.21 from PerlPoint-Converters 1.01  -->
<HEAD>
<TITLE>integer</TITLE>
</HEAD>
<!-- ************************************************************** -->
<BODY bgcolor="#FFFFFF" text="#000000" link="#1874cd" vlink="#AAAAAA" alink="#FF0000">
<!--
  *** NAVIGATION BAR =================================================
  $Revision: 1.2 $
  $Date: 2001/12/06 21:38:12 $
-->

<center>
<TABLE> 
<TR>
  <TD colspan=3 >
    <font size=-1>
    Next: <a href="slide0033.htm">lib</a>
    &nbsp;&nbsp;Previous: <a href="slide0031.htm">diagnostics</a>
     &nbsp;&nbsp;Contents: <a href="slide0000.htm" target="Data">Index</a>
    </font> 
  </td>
</TR>
</TABLE>
<img src="orange_line.png">
</center>

<a name="integer">
<center>
<H1>integer
</H1></center>


<P>
This tells the compiler to use integer operations from here to the end of the enclosing BLOCK.  On many machines, this doesn't matter a great deal for most computations, but on those without floating point hard- ware, it can make a big difference in performance.
</P>


<P>
Note that this only affects how most of the arithmetic and relational operators handle their operands and results, and not how all numbers everywhere are treated.  Specifically, &quot;use integer;&quot; has the effect that before computing the results of the arithmetic operators (+, -, *, /, %, +=, -=, *=, /=, %=, and unary minus), the comparison operators (&lt;, &lt;=, &gt;, &gt;=, ==, !=, &lt;=&gt;), and the bitwise operators (|, &amp;, ^, &lt;&lt;, &gt;&gt;, |=, &amp;=, ^=, &lt;&lt;=, &gt;&gt;=), the operands have their fractional portions truncated (or floored), and the result will have its fractional portion truncated as well.  In addition, the range of operands and results is restricted to that of familiar two's complement integers, i.e., -(2**31) .. (2**31-1) on 32-bit architectures, and -(2**63) .. (2**63-1) on 64-bit architectures.  For example, this code
</P>

<UL>
<TABLE BORDER=2 CELLPADDING=5 WIDTH=80%><TR><TD bgcolor="#e5e5e5"><PRE>
<B><FONT COLOR="#000000">
    use integer;
    $x = 5.8;
    $y = 2.5;
    $z = 2.7;
    $a = 2**31 - 1;  # Largest positive integer on 32-bit machines
    $, = &quot;, &quot;;
    print $x, -$x, $x + $y, $x - $y, $x / $y, $x * $y, $y == $z, $a, $a +
1;</FONT></B></PRE></TD></TR></TABLE></UL>


<P>
will print:  5.8, -5, 7, 3, 2, 10, 1, 2147483647, -2147483648
</P>


<P>
Note that $x is still printed as having its true non-integer value of 5.8 since it wasn't operated on.  And note too the wrap-around from the largest positive integer to the largest negative one.   Also, arguments passed to functions and the values returned by them are not affected by &quot;use integer;&quot;.  E.g.,
</P>
</BODY>
</HTML>
