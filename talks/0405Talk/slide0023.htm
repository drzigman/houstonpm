<HTML>
<!-- *** Created by pp2html, build 1.21 from PerlPoint-Converters 1.01  -->
<HEAD>
<TITLE>Getopt::Std</TITLE>
</HEAD>
<!-- ************************************************************** -->
<BODY bgcolor="#FFFFFF" text="#000000" link="#1874cd" vlink="#AAAAAA" alink="#FF0000">
<!--
  *** NAVIGATION BAR =================================================
  $Revision: 1.2 $
  $Date: 2001/12/06 21:38:12 $
-->

<center>
<TABLE> 
<TR>
  <TD colspan=3 >
    <font size=-1>
    Next: <a href="slide0024.htm">Getopt::Long</a>
    &nbsp;&nbsp;Previous: <a href="slide0022.htm">FindBin</a>
     &nbsp;&nbsp;Contents: <a href="slide0000.htm" target="Data">Index</a>
    </font> 
  </td>
</TR>
</TABLE>
<img src="orange_line.png">
</center>

<a name="Getopt::Std">
<center>
<H1>Getopt::Std
</H1></center>


<P>
This is the module to use if your program accepts command line options.
</P>


<P>
The getopt() function processes single-character switches with switch clustering.  Pass one argument which is a string containing all switches that take an argument.  For each switch found, sets $opt_x (where x is the switch name) to the value of the argument if an argu- ment is expected, or 1 otherwise.  Switches which take an argument don't care whether there is a space between the switch and the argu- ment.
</P>


<P>
The getopts() function is similar, but you should pass to it the list of all switches to be recognized.  If unspecified switches are found on the command-line, the user will be warned that an unknown option was given.
</P>


<P>
Note that, if your code is running under the recommended &quot;use strict 'vars'&quot; pragma, you will need to declare these package variables with &quot;our&quot;:
</P>

<UL>
<TABLE BORDER=2 CELLPADDING=5 WIDTH=80%><TR><TD bgcolor="#e5e5e5"><PRE>
<B><FONT COLOR="#000000">
    our($opt_x, $opt_y);</FONT></B></PRE></TD></TR></TABLE></UL>


<P>
For those of you who don't like additional global variables being cre- ated, getopt() and getopts() will also accept a hash reference as an optional second argument.  Hash keys will be x (where x is the switch name) with key values the value of the argument or 1 if no argument is specified.
</P>


<P>
To allow programs to process arguments that look like switches, but aren't, both functions will stop processing switches when they see the argument &quot;--&quot;.  The &quot;--&quot; will be removed from @ARGV.
</P>


<P>
Some examples:
</P>

<UL>
<TABLE BORDER=2 CELLPADDING=5 WIDTH=80%><TR><TD bgcolor="#e5e5e5"><PRE>
<B><FONT COLOR="#000000">
    use Getopt::Std;

    getopt('oDI');    # -o, -D &amp; -I take arg.  Sets $opt_* as a side effect.
    getopt('oDI', \%opts);    # -o, -D &amp; -I take arg.  Values in %opts
    getopts('oif:');  # -o &amp; -i are boolean flags, -f takes an argument
                      # Sets $opt_* as a side effect.
    getopts('oif:', \%opts);  # options as above. Values in %opts</FONT></B></PRE></TD></TR></TABLE></UL>
</BODY>
</HTML>
