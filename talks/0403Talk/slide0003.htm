<HTML>
<!-- *** Created by pp2html, build 1.21 from PerlPoint-Converters 1.01  -->
<HEAD>
<TITLE>The @ARGV array</TITLE>
</HEAD>
<!-- ************************************************************** -->
<BODY bgcolor="#FFFFFF" text="#000000" link="#1874cd" vlink="#AAAAAA" alink="#FF0000">
<!--
  *** NAVIGATION BAR =================================================
  $Revision: 1.2 $
  $Date: 2001/12/06 21:38:12 $
-->

<center>
<TABLE> 
<TR>
  <TD colspan=3 >
    <font size=-1>
    Next: <a href="slide0004.htm">Using &amp;&amp; and do{} Blocks</a>
    &nbsp;&nbsp;Previous: <a href="slide0002.htm">Boolean Options</a>
     &nbsp;&nbsp;Contents: <a href="slide0000.htm" target="Data">Index</a>
    </font> 
  </td>
</TR>
</TABLE>
<img src="orange_line.png">
</center>

<a name="The @ARGV array">
<center>
<H1>The @ARGV array
</H1></center>


<P>
To get these options we have to look at the @ARGV array which holds all of the command line arguments. A basic option processing loop looks like this:
</P>

<UL>
<TABLE BORDER=2 CELLPADDING=5 WIDTH=80%><TR><TD bgcolor="#e5e5e5"><PRE>
<B><FONT COLOR="#000000">
    my($opt_f, $opt_or);
    while ( $ARGV[0] =~ /^-/ ) {
        $_ = $ARGV[0];
        if (/^-or$/){$opt_or = 1; shift @ARGV; next}
        if (/^-f$/) {$opt_f  = 1; shift @ARGV; next}
        die &quot;illegal option: $_&quot;;
    }</FONT></B></PRE></TD></TR></TABLE></UL>


<P>
What we are doing here is first checking if the first element of the @ARGV array starts with a '-'. If that's true, we set $_ to that element and then test if it matches one of the options we are allowing in our program. If it matches, we set the appropriate variable to 1, shift that element off of the @ARGV array, and use 'next' to return to the top of the loop to look for another option. If it did not match any of our options, we die with a simple statement indicating an illegal option.
</P>
</BODY>
</HTML>
