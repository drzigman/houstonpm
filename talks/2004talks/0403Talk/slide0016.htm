<HTML>
<!-- *** Created by pp2html, build 1.21 from PerlPoint-Converters 1.01  -->
<HEAD>
<TITLE>A Reasonably Complex Example.</TITLE>
</HEAD>
<!-- ************************************************************** -->
<BODY bgcolor="#FFFFFF" text="#000000" link="#1874cd" vlink="#AAAAAA" alink="#FF0000">
<!--
  *** NAVIGATION BAR =================================================
  $Revision: 1.2 $
  $Date: 2001/12/06 21:38:12 $
-->

<center>
<TABLE> 
<TR>
  <TD colspan=3 >
    <font size=-1>
    Next: <a href="slide0017.htm">Bundling Options.</a>
    &nbsp;&nbsp;Previous: <a href="slide0015.htm">Specifying Values For Options.</a>
     &nbsp;&nbsp;Contents: <a href="slide0000.htm" target="Data">Index</a>
    </font> 
  </td>
</TR>
</TABLE>
<img src="orange_line.png">
</center>

<a name="A Reasonably Complex Example.">
<center>
<H1>A Reasonably Complex Example.
</H1></center>


<P>
So, for example, if we want to accept 3 options: -f which takes a mandatory string; -a which takes no value; and --verbose which optionally takes an integer value, our call would look like:
</P>

<UL>
<TABLE BORDER=2 CELLPADDING=5 WIDTH=80%><TR><TD bgcolor="#e5e5e5"><PRE>
<B><FONT COLOR="#000000">
    GetOptions(\%opts, 'a', 'f=s', 'verbose:i');</FONT></B></PRE></TD></TR></TABLE></UL>


<P>
Now, if we call the program with '-f 12.2' we'll not get a warning and '12.2' will be taken as a string. There's no way to type check for a string since integers and floats can be strings. If we call the program with no value for the --verbose option, its value will be 0. And, if we call it with '--verbose 12.2', its value will also be 0 because we told it that the integer value was optional. Thus, when it sees 12.2 it decides that can not be the value so it must be an argument to the program. However, if we had specified 'verbose=i' and called the program with '--verbose 12.2', we would get a warning that the option value is invalid and --verbose would be undefined.
</P>
</BODY>
</HTML>
